#pragma version 2

// check that call is contract being created (ApplicationID == 0)
int 0
txn ApplicationID
==
bnz creation

// check that call is register (OnCompletion == OptIn)
txn OnCompletion
int OptIn
==
bnz register

// check for closeout
int CloseOut
txn OnCompletion
==
bnz close_out

// check that call is vote (ApplicationArgs[0] == "vote")
txna ApplicationArgs 0
byte "vote"
==
bnz vote

// invalid call
int 0
return

// ====================== On Creation ======================

creation:

// save the creator of the contract
byte "Creator"
txn Sender
app_global_put

// fail if 4 args are not passed during creation
txn NumAppArgs
int 4
==
bz failed

// initialise global variables
byte "RegBegin"
txna ApplicationArgs 0
btoi
app_global_put

byte "RegEnd"
txna ApplicationArgs 1
btoi
app_global_put

byte "VoteBegin"
txna ApplicationArgs 2
btoi
app_global_put

byte "VoteEnd"
txna ApplicationArgs 3
btoi
app_global_put

// Return with success
int 1
return

// ====================== On Register ======================

register:

// Round >= Registration Begin Round
global Round
byte "RegBegin"
app_global_get
>=

// Round <= Registration End Round
global Round
byte "RegEnd"
app_global_get
<=

// both must be true
&&
bz failed

// return with success
int 1
return

// ====================== On Vote ======================

vote:

// Round >= Vote Begin Round
global Round
byte "VoteBegin"
app_global_get
>=

// Round <= Vote Begin Round
global Round
byte "VoteEnd"
app_global_get
<=

// both must be true
&&
bz failed

// check that the account has opted in ->
// Note: app_opted_in uses account offset (0 == sender, 1 == txn.accounts[0], etc..)
int 0
txn ApplicationID
app_opted_in
bz failed

// check local to see if sender has voted
// Note: app_local_get_ex will return whether the sender has voted
int 0
txn ApplicationID
byte "voted"
app_local_get_ex
bnz failed

// read existing vote candidate
// i think i need a pop here
pop
txna ApplicationArgs 1
byte "candidatea"
==

txna ApplicationArgs 1
byte "candidateb"
==
||
bz failed
int 0

txna ApplicationArgs 1
app_global_get_ex
bnz increment_existing
pop
int 0

increment_existing:
int 1
+
store 1
txna ApplicationArgs 1
load 1
app_global_put
int 0 // sender
byte "voted"
txna ApplicationArgs 1
app_local_put
int 1
return

voted:
pop
int 0
return

// ====================== On Close Out ======================

close_out:

//see if the vote is over
global Round
byte "VoteEnd"
app_global_get
>
bnz finished

// check local to see if they have voted
int 0 // sender
txn ApplicationID
byte "voted"

// 3 pars get popped
// two values pushed 0/1 and value
// 0/1 should be on top of stack

app_local_get_ex

// Value must not exist
// else user voted
bnz voted_c
pop
int 1
return

voted_c:
// vote candidate is at the top of the stack
// read existing vote candidate
store 1
int 0 // current smart contract
load 1
app_global_get_ex
store 3
store 4
load 3
bnz decrement_existing

// did not find candidate
int 1
return

// decrement the vote
decrement_existing:
load 4
int 1
-
store 2
load 1
load 2
app_global_put
int 1
return

// ====================== On Failed ======================

failed:
int 0
return
